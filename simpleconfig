using Elastic.Apm.Config;   // Required for IConfigurationReader.
using System.Collections.Generic;

public class SimpleConfigurationReader : IConfigurationReader
{   
    // Hard-coded settings. In a real app you might read these from environment variables.
    private readonly Dictionary<string, string> _settings = new()
    {
        { "ServerUrl", "http://localhost:8200" },   // Change to your APM Server URL.
        { "ServiceName", "MyWpfApp" },                // The name your service shows in Kibana.
        { "Environment", "Development" }              // For example: Development, Production, etc.
    };

    // If you need an API key for your APM Server, set it here; otherwise, keep it null.
    public string ApiKey => null;

    // How to capture HTTP request/response bodies. We use the default setting.
    public string CaptureBody => ConfigConsts.DefaultValues.CaptureBody;

    // Metrics that should be disabled – we’re not disabling any.
    public IReadOnlyList<WildcardMatcher> DisableMetrics => new List<WildcardMatcher>();

    // The environment (Development, Production, etc.)
    public string Environment => _settings["Environment"];

    // Namespaces to exclude from stack traces; we leave this empty.
    public IReadOnlyCollection<string> ExcludedNamespaces => Array.Empty<string>();

    // Minimum duration for an exit span – we use the default.
    public double ExitSpanMinDuration => ConfigConsts.DefaultValues.ExitSpanMinDuration;

    // Whether to use the Elastic traceparent header – default.
    public bool UseElasticTraceparentHeader => ConfigConsts.DefaultValues.UseElasticTraceparentHeader;

    // Fields that should be sanitized – use the default list.
    public IReadOnlyList<WildcardMatcher> SanitizeFieldNames => ConfigConsts.DefaultValues.SanitizeFieldNames;

    // A secret token if your APM Server requires one – null if not.
    public string SecretToken => null;

    // The APM Server URL.
    public string ServerUrl => _settings["ServerUrl"];

    // The name of your service.
    public string ServiceName => _settings["ServiceName"];

    // Your service version.
    public string ServiceVersion => "1.0.0";

    // Minimum duration (in ms) for capturing span frames – default.
    public double SpanFramesMinDurationInMilliseconds => ConfigConsts.DefaultValues.SpanFramesMinDurationInMilliseconds;

    // Maximum number of stack trace frames – default.
    public int StackTraceLimit => ConfigConsts.DefaultValues.StackTraceLimit;

    // Whether to verify the server certificate. Set to true in production.
    public bool VerifyServerCert => true;

    // Whether to use central configuration – we’re not using that.
    public bool CentralConfig => false;

    // URLs to ignore for transactions – none in our simple setup.
    public IReadOnlyList<WildcardMatcher> TransactionIgnoreUrls => new List<WildcardMatcher>();

    // Whether the agent is recording – true to record.
    public bool Recording => true;

    // The log level – set to Warning (you can change to Debug for more details).
    public LogLevel LogLevel => LogLevel.Warning;

    // Global labels that are attached to every transaction – none here.
    public IReadOnlyDictionary<string, string> GlobalLabels => new Dictionary<string, string>();

    // Whether sending data is disabled – false means we are sending data.
    public bool DisableSend => false;

    // Transaction sample rate. 1.0 means sample every transaction.
    public double TransactionSampleRate => 1.0;

    // Message queues to ignore – not used in this simple setup.
    public IReadOnlyList<WildcardMatcher> IgnoreMessageQueues => new List<WildcardMatcher>();
}
