using Elastic.Apm.Config;   // Required for IConfigurationReader.
using System.Collections.Generic;

public class SimpleConfigurationReader : IConfigurationReader
{
    // These settings are hard-coded here.
    // In a real project, you might read these from a config file or environment variables.
    private readonly Dictionary<string, string> _settings = new()
    {
        { "ServerUrl", "http://localhost:8200" },   // Change this to your APM server URL.
        { "ServiceName", "MyWpfApp" },                // This is the name that will appear in Kibana.
        { "Environment", "Development" }              // Environment tag, e.g., Development or Production.
    };

    // If your APM server uses an API key, add it here; otherwise, keep it null.
    public string ApiKey => null;

    // How to capture HTTP bodies; using the default from the agent.
    public string CaptureBody => ConfigConsts.DefaultValues.CaptureBody;

    // Metrics you want to disable; here we disable none.
    public List<WildcardMatcher> DisableMetrics => new();

    // Returns the environment setting from our dictionary.
    public string Environment => _settings["Environment"];

    // Namespaces to exclude; here we use an empty array.
    public IReadOnlyCollection<string> ExcludedNamespaces => Array.Empty<string>();

    // The minimum duration for exit spans; using the default.
    public double ExitSpanMinDuration => ConfigConsts.DefaultValues.ExitSpanMinDuration;

    // Whether to use the Elastic traceparent header; using default.
    public bool UseElasticTraceparentHeader => ConfigConsts.DefaultValues.UseElasticTraceparentHeader;

    // Fields to sanitize; using default values.
    public IReadOnlyList<WildcardMatcher> SanitizeFieldNames => ConfigConsts.DefaultValues.SanitizeFieldNames;

    // Secret token for the APM server; not needed in our simple setup.
    public string SecretToken => null;

    // Returns the APM server URL.
    public string ServerUrl => _settings["ServerUrl"];

    // Returns the service name.
    public string ServiceName => _settings["ServiceName"];

    // You can hard-code your app version here.
    public string ServiceVersion => "1.0.0";

    // Minimum duration (in ms) for recording span frames; using default.
    public double SpanFramesMinDurationInMilliseconds => ConfigConsts.DefaultValues.SpanFramesMinDurationInMilliseconds;

    // Limit for stack trace depth; using default.
    public int StackTraceLimit => ConfigConsts.DefaultValues.StackTraceLimit;

    // Whether to verify the server certificate; set to true for production.
    public bool VerifyServerCert => true;

    // Whether to enable central configuration; false in this case.
    public bool CentralConfig => false;

    // URLs to ignore for transactions; here we use an empty list.
    public IReadOnlyList<WildcardMatcher> TransactionIgnoreUrls => new List<WildcardMatcher>();

    // Whether recording is enabled.
    public bool Recording => true;

    // The log level to use; you can change to Debug for more verbosity.
    public LogLevel LogLevel => LogLevel.Warning;

    // Global labels that are sent with every transaction; here we have none.
    public IReadOnlyDictionary<string, string> GlobalLabels => new Dictionary<string, string>();

    // Whether to disable sending data; false so that data is sent.
    public bool DisableSend => false;

    // Transaction sample rate; 1.0 means sample every transaction.
    public double TransactionSampleRate => 1.0;

    // Message queues to ignore; here we use an empty list.
    public IReadOnlyList<WildcardMatcher> IgnoreMessageQueues => Array.Empty<WildcardMatcher>();
}
